name: Build modules

on:
  push:
    branches: [ master, ver/* ]
  pull_request:
  workflow_dispatch:

env:
  VERSION: '1.20'
  COMMIT_MSG: ${{ github.event.head_commit.message }}
  TEST_FABRIC_SERVER: https://meta.fabricmc.net/v2/versions/loader/1.20.4/0.15.3/0.11.2/server/jar
  TEST_FABRIC_API: https://cdn.modrinth.com/data/P7dR8mSH/versions/JMCwDuki/fabric-api-0.92.0%2B1.20.4.jar
  TEST_PACKTEST: https://cdn.modrinth.com/data/XsKUhp45/versions/18smpIeE/packtest-1.6-mc1.20.4.jar

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.event_name != 'pull_request' && 'release' || format('pr-{0}', github.event.number) }}
    steps:
      - uses: actions/checkout@v4

      - name: Checkout release branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v4
        with:
          ref: release
          path: release

      - name: Fetch pull request base
        if: github.event_name == 'pull_request'
        run: git fetch origin ${{ github.base_ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1.2.1
        with:
          virtualenvs-in-project: true

      - name: Setup cache
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install

      - name: Build and publish all modules
        if: github.event_name != 'pull_request'
        run: poetry run beet -p beet-release.yaml -l ${{ env.LOG_LEVEL }} build
        env:
          BEET_MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          BEET_SMITHED_TOKEN: ${{ secrets.SMITHED_TOKEN }}
          LOG_LEVEL: ${{ runner.debug == 1 && 'DEBUG' || 'INFO'}}

      - name: Build all modules for pull request
        if: github.event_name == 'pull_request'
        run: poetry run beet -p beet-release.yaml -l ${{ env.LOG_LEVEL }} build
        env:
          LOG_LEVEL: ${{ runner.debug == 1 && 'DEBUG' || 'INFO'}}

      - name: Upload artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: 'Modules for pull request #${{ github.event.number }}'
          path: ${{ github.workspace }}/release/${{ env.VERSION }}/

      - name: Commit release
        if: github.event_name != 'pull_request'
        run: |
          git config --global user.email "${{ github.event.head_commit.author.email }}"
          git config --global user.name "${{ github.event.head_commit.author.username }}"
          cd release
          git add .
          git commit -m "ðŸš€ ${{ github.event.after }} $COMMIT_MSG"

      - name: Push release
        if: github.event_name != 'pull_request'
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          directory: release
          branch: release

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1.2.1
        with:
          virtualenvs-in-project: true

      - name: Setup cache
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install

      - name: Build all modules for tests
        run: poetry run beet -p beet-test.yaml -l ${{ env.LOG_LEVEL }} build
        env:
          LOG_LEVEL: ${{ runner.debug == 1 && 'DEBUG' || 'INFO'}}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download server files
        run: |
          curl -o server.jar $TEST_FABRIC_SERVER
          mkdir mods
          curl -o mods/fabric-api.jar $TEST_FABRIC_API
          curl -o mods/packtest.jar $TEST_PACKTEST

      - name: Copy packs to world
        run: |
          mkdir -p world/datapacks
          cp out/gm4_*.zip world/datapacks

      - name: Run test server
        run: |
          java -Xmx2G -Dpacktest.auto -Dpacktest.auto.annotations -jar server.jar nogui
