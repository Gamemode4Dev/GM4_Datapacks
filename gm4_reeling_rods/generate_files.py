from beet import Context, Advancement, Function
import math
from pathlib import Path
from gm4.utils import CSV, CSVRow
from itertools import product 

def beet_default(ctx: Context):
    """
        - generates set_lookup_table.mcfunction
        - generates advancements and reward functions for every bit state of an entity's scoreboard id
        - reads csv to ctx.meta for hooked_entity/select_type.mcfunction
    """
    create_lookup_file(ctx)
    create_bit_advancements(ctx)

    entity_list =  CSV.from_file(Path('gm4_reeling_rods','entities.csv'))
    dismountable_entities: list[CSVRow] = []
    non_dismountable_entities: list[CSVRow] = []
    for entity_type in entity_list:
        if entity_type['can_dismount'].as_bool():
            dismountable_entities.append(entity_type)
            continue
        non_dismountable_entities.append(entity_type)
    ctx.meta['dismountable_entities'] = dismountable_entities
    ctx.meta['non_dismountable_entities'] = non_dismountable_entities

def create_lookup_file(ctx: Context):
    ctx.data["gm4_reeling_rods:set_lookup_table"] = Function(  
        [  
            f"scoreboard players set ${key} gm4_reeling_rods.lookup {value}"  
            for key, value in {  
                (x**2 + y**2 + z**2): int(  
                    100 * (0.08 * math.sqrt(math.sqrt(x**2 + y**2 + z**2)))  
                )  
                for x, y, z in product(range(0, 34), range(0, 34), range(0, 34))  
            }.items() if math.sqrt(key) <= 33
        ]
    )  

def create_bit_advancements(ctx: Context):
    for bit in range(16):
        for value in range(2):
            ctx.data[f"gm4_reeling_rods:fished/bit_{bit}_{value}"] = Advancement({
                "criteria":{
                    "fishing_rod_hooked":{
                        "trigger":"minecraft:fishing_rod_hooked",
                        "conditions":{
                            "entity": [
                                {
                                    "condition": "minecraft:entity_scores",
                                    "entity": "this",
                                    "scores": {
                                        f"gm4_reeling_rods.id_bit.{bit}": value
                                    }
                                }
                            ]
                        }
                    }
                },
                "rewards":{
                    "function": f"gm4_reeling_rods:player/bit_{bit}_{value}"
                }
            })
            ctx.data[f"gm4_reeling_rods:player/bit_{bit}_{value}"] = Function([
                f"# player adv logic for getting bit {bit} at value {value}. Generated by generate_files.py.",
                f"# run from advancement fished/bit_{bit}_{value}\n",
                f"advancement revoke @s only gm4_reeling_rods:fished/bit_{bit}_{value}\n",
                "execute if entity @s[gamemode=adventure] run return fail\n",
                "data modify storage gm4_reeling_rods:temp bit_data set value {bit_score:\"" + f"gm4_reeling_rods.id_bit.{bit}={value}\", bit:\"{bit}\"" + "}",
                "data modify storage gm4_reeling_rods:temp bit_data.UUID set from entity @s UUID",
                "function gm4_reeling_rods:player/received_bit with storage gm4_reeling_rods:temp bit_data"
            ])
